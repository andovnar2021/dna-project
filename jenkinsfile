pipeline {
    agent any
    
    triggers {
    GenericTrigger (
      genericVariables: [
                 [key: 'ref1', value: '$.ref'],
                 [key: 'before', value: '$.before'],
                 [key: 'commit', value: '$.head_commit.message'],
                 [key: 'repository', value: '$.repository.full_name'],
                 [key: 'commiter',  value: '$.commits[0].author.name']
      ],

      causeString: 'Triggered on $ref',
      token: "dos", 
      printContributedVariables: true,
      printPostContent: true,
      silentResponse: false,
    )
   }
    
    
    environment {
        
        DOCKERHUB_CREDENTIALS=credentials('dh1')
        
    
       
    }
    
   

    stages {
        
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/andovnar2021/dna-project.git']]])
            }
        }
    
     
        stage('Pre-build') {
            steps {
               script {
                      sh """#!/bin/bash
                          python3 -m venv ~/.somevenv
                          source ~/.somevenv/bin/activate
                          pip install --upgrade pip &&\
                          pip install -r requirements.txt
                          pylint myapp.py
                          pytest mytest.py

                            """
                }
           
            }
        }
        
                

    
        
        stage('Build') {

			steps {
			    
			 sh "docker build -t 11051988/myflaskapp:${env.BUILD_NUMBER} ."
			 
			}
		}
		
		stage('Exec') {

			steps {
			    
			   sh '''
                 echo Variables from shell:
                 echo ref $ref1
                 echo before $before
                 echo commiter $commiter
                 echo commit $commit
                '''
			 
			}
		}
		
        stage('Status Build') {
            steps {
                slackSend channel: '#test_chanel', color: 'good', message: 'The build successful'
            }
        }  
        
       stage('Login') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}

		stage('Push') {

			steps {
				sh "docker push 11051988/myflaskapp:${env.BUILD_NUMBER} "
			}
		}
		
		stage('Deploy') {
            steps {
                echo 'Deploying....'
                withAWS(credentials:'awscreds') {
                    sh '''#!/bin/bash

                    TASK_NAME=task
                    SERVICE_NAME=flask-service
                    IMAGE_NAME=11051988/myflaskapp
                    CLUSTER_NAME=flaskcluster
                    REGION=eu-central-1
                    VERSION=${env.BUILD_NUMBER} 
                    ACCOUNT_NUMBER=648139240099
                    
                    NEW_IMAGE=$IMAGE_NAME:$VERSION
                    TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_NAME" --region "$REGION")
                    NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$NEW_IMAGE" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
                    NEW_REVISION=$(aws ecs register-task-definition --region "$REGION" --cli-input-json "$NEW_TASK_DEFINITION")
                    NEW_REVISION_DATA=$(echo $NEW_REVISION | jq '.taskDefinition.revision')
                    
                    NEW_SERVICE=$(aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_NAME --force-new-deployment)
                    
                    echo "done"
                    echo "${TASK_NAME}, Revision: ${NEW_REVISION_DATA}"
                                        
                    
                    '''
                }   
            }
		}	
	
    }
    
    post {
       
        
        success {
               slackSend channel: '#test_chanel', color: 'good', message:"Build deployed successfully - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)""
            }
        failure {
             slackSend failOnError:true, message:"Build failed  - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)" , channel:'#test_chanel', color: 'danger'
    }
		always {
			sh 'docker logout'
			 
		}
	}

}
